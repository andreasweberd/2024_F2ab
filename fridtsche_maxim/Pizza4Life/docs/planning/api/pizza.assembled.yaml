openapi: 3.0.1
info:
  title: Pizza4Life local endpoint API
  description: yep
  version: 0.0.4
servers:
  - url: https://127.0.0.1:4218
paths:

  /login:
    post:
      summary: Log in to the system
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Invalid username or password

  /logout:
    post:
      summary: Log out of the system
      tags:
        - Auth
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful logout
        '401':
          description: Unauthorized access

  /orders:
    get:
      summary: List all orders for the authenticated account
      tags:
        - Orders
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized access

    post:
      summary: Create a new pizza order
      tags:
        - Orders
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOrder'
      responses:
        '201':
          description: Order successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Missing data
        '401':
          description: Unauthorized access

  /orders/{orderId}:
    get:
      summary: Get details of a specific order
      tags:
        - Orders
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: orderId
          schema:
            type: integer
          required: true
          description: ID of the order to fetch
      responses:
        '200':
          description: Details of the specific order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
        '401':
          description: Unauthorized access

    put:
      summary: Update an existing order's status
      tags:
        - Orders
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: orderId
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                statusId:
                  type: integer
      responses:
        '200':
          description: Order status updated successfully
        '404':
          description: Order not found
        '401':
          description: Unauthorized access

    delete:
      summary: Delete an order
      tags:
        - Orders
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: orderId
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Order deleted
        '403':
          description: Order not in finished state
        '404':
          description: Order not found
        '401':
          description: Unauthorized access

  /ingredients:
    get:
      summary: Get a list of all available ingredients
      tags:
        - Ingredients
      responses:
        '200':
          description: A list of ingredients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ingredient'

  /account:
    get:
      summary: Get account details
      tags:
        - Account
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Account details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
      Account:
        type: object
        properties:
          accountId:
            type: integer
            format: int64
          username:
            type: string
          email:
            type: string
          phoneNumber:
            type: string
          dateCreated:
            type: string
            format: date-time
        required:
          - accountId
          - username
          - email

      Order:
        type: object
        properties:
          orderId:
            type: integer
            format: int64
          accountId:
            type: integer
            format: int64
          deviceId:
            type: integer
            format: int64
          statusId:
            type: integer
            format: int64
          totalAmount:
            type: number
            format: float
          orderDate:
            type: string
            format: date-time
          paymentStatus:
            type: string
            enum:
              - paid
              - unpaid
          readyStatus:
            type: string
            description: Current order status
            enum:
              - queued
              - cooking
              - ready
              - finished
          ingredients:
            type: array
            items:
              $ref: '#/components/schemas/Ingredient'
        required:
          - ingredients

      NewOrder:
        type: object
        properties:
          deviceId:
            type: integer
          ingredients:
            type: array
            description: For creation pass only ingredient id
            items:
              $ref: '#/components/schemas/Ingredient'

      Ingredient:
        type: object
        properties:
          ingredientId:
            type: integer
          name:
            type: string
          type:
            type: string
            enum:
              - liquid
              - meat
              - fish
              - fruitOrVeggie
              - seasoning
          unit:
            type: string
            enum:
              - piece
              - ml
              - mg
          quantity:
            type: number
          pricePerUnit:
            type: number
            format: float
          stockLevel:
            type: integer
          additives:
            type: array
            description: List of additives and allergens of this ingredient
            items:
              type: string
        required:
          - ingredientId
      Status:
        type: object
        properties:
          statusId:
            type: integer
            format: int64
          description:
            type: string
